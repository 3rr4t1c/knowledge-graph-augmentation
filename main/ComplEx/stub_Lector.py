from dataset import Dataset
import proof_Lector_tools as plt

class StubLector:
    """ This class will simulate the Lector System and 
    can be used for further new implementation or wrapper. """


    # Init a new Lector System require a KG (aka Dataset object by Andrea Rossi)
    def __init__(self, knowledge_graph):
        # Simulated relation index (this will be in Dataset object)
        #self.relations_index = ['spouse', 'place_of_birth', 'place_in_place', 'education']
        # From KG we need relation_index and facts for phrase filtering
        self.knowledge_graph = knowledge_graph
        print('StubLector is ready.')

    
    # Training Lector require a text corpus
    def train_mode(self, text_corpus):
        # Simulated map: pattern -> (score, relation), this will be generated by Lector after training 
        # where the score is the binding score evaluated by Lector      
        # This will produce a map: pattern -> (score, relation) as follow:
        self.phrase2relation = { 'met': (0.7, 1), 
                                 'married on': (0.9, 1), 
                                 'was born in': (0.8, 2), 
                                 'born in': (0.9, 2) }
        # This structure represent an internal state of Lector and will not be returned

        ## Training simulation ##
        # Load ground truth for generating true facts
        self.GT_facts = plt.load_relation2instances('data/FB15k-237/test.txt', plt.EXAMPLE_TARGET_RELATIONS)
        # Simulate internal state of Lector after training
        self.phrase2relation = plt.generate_phrase2relation(self.GT_facts.keys(), 5, 10)


    # In phrase tracking mode, all facts are kept grouped by 'hint' phrase  
    # Identical facts may occur for different phrases
    def phrase_tracking_mode(self, text_corpus):
        # Simulated facts predicted by phrases, this will be generated by Lector after tracking      
        # This mode will keep all facts linked to phrases as follow:
        phrase2facts = { 'was born in': [(1,2,3), (4,5,6), (7,8,9)],
                         'married on': [(3,2,6), (1,8,9), (9,1,4)],
                         'met': [(3,4,5), (6,6,7), (9,1,4), (3,2,2)] }
        # This strucrure is auxiliary for Lector and will be returned
        
        ## Phrase tracking simulation ##
        phrase2facts = plt.generate_phrase2facts(self.phrase2relation, self.GT_facts)
        # Quick encoding
        phrase2facts = {k: plt.facts2samples_encoder(v, self.knowledge_graph) for k, v in phrase2facts.items()}

        return phrase2facts
        
    

    # Stub method for fact harvesting mode
    def fact_harvesting_mode(self, text_corpus):
        print("Fact Harvesting Mode is not Available")
        return set() # A set of new facts (all unique)
        # This structure is the main purpose of lector and will be returned